TODO:
- ! IMPORTANT ! - Check if ffmpeg processness need to be killed manually in onModuleDestroy
- Fix it so that stream can be force stopped while in 'live' mode
- Add retry mechanism for stream destinations

--- Improvements:
 - Better link generation and config
   * with settings for public and watch host URLs, etc....
 - When live preview is disabled, show some static image so we know.


------------------- Old deprecated ----------------------
TESTS:
 - Milion konekta / diskonekta klienata
  - Ima onaj bug sa 'destinaiton already active'
  - Fix keyframes rate problem. Set keyframes to 4 sec
 - Testiran ngingx proxy
 - uptime monitors

NOW:
- DONE - Rewrite FfmpegRunnerSErvice, not to be AI fuckedup, and to properly handle and report states
  - DONE -  Maybe create some ffmpegInstanceState and update it based on FFmpeg logs
- DONE - Properly update destination state based on ffmpegInstanceState
- DONE - Docker and Docker Compose support to run all of this shit
- Properly merge StreamInstance.ffmpegFlags and StreamDestination.ffmpegFlags
- Show thumbnail or priview of the stream in the frontend

- ! priprity ! Forbit external clients to directly connect to RTMP injection endpoint
- ! priprity ! Handle restarts of FFMPEG process (retry a few times)
- ! priority ! if ffmpeg gets stuck in 'started' ar 'starting' state, restart it.

LATER:
 - Figure out what happens to running FFMPEG processes when backend crashes
 - In frontend, maybe clear up left-over react template tails (if any)
 - Limit incomming RTMP conections to be allowed only over link specified in 'RTMP_INJECT_PUBLIC_URL'

LOW PRIO:
- DockerCOmpose Health checks for all services
- DockerCOmpose Automatic restarts unless explicitly stopped
- DockerCOmpose Proper service dependencies
- DockerCOmpose Persistent MongoDB data through volumes


TO TEST:
 -API safety not tested. To test:
  - Can destination be edited/deleted if it's in use?
  - Can stream be edited/deleted if it's in use?
  - Can stream be double started?
